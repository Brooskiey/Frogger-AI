@startuml

title __NEAT's Class Diagram__\n

  namespace neat {
    enum Coefficients {
      ADD_LINK_MUT
      ADD_NODE_MUT
      BIAS_NODE_LINK_WEIGHT
      COMPAT_THRESH
      CROSSOVER_THRESH
      CULL_THRESH
      DISJOINT_CO
      LINK_WEIGHT_MUT
      STALENESS_THRESH
      WEIGHT_CO
      value
    }
  }
  

  namespace neat {
    class neat.Link {
        - enabled : boolean
        - innovationNum : int
        - inputNodeID : int
        - weight : double
        + Link()
        + equals()
        + getInnovationNum()
        + getInputNodeID()
        + getOutputNode()
        + getWeight()
        + isEnabled()
        + mutateWeight()
        + setEnabled()
        + setWeight()
    }
  }
  

  namespace neat {
    class neat.Network {
        - fitness : int
        - hiddenNodes : List<Node>
        {static} - innovationList : Map<Integer, String>
        - inputNodes : Node[]
        - links : List<Link>
        - numLayers : int
        - numNodes : int
        - outputNodes : Node[]
        + Network()
        + Network()
        + crossover()
        + feedForward()
        + getFitness()
        + getLinks()
        + isCompatibleTo()
        + isFullyConnected()
        + mutate()
        + setFitness()
        - addLink()
        - addLinkMutation()
        - addNode()
        - addNodeMutation()
        - copyLinks()
        - generateNetwork()
        - getAverageWeightDiff()
        - getInnovationNumber()
        - getNode()
        - getNumDisjointLinks()
        - isBadLink()
        - listNodesByLayer()
    }
  }
  

  namespace neat {
    class neat.Node {
        {static} - INPUT_BIAS_LAYER : int
        - id : int
        - inputValue : double
        - layer : int
        - outgoingLinks : List<Link>
        - outputValue : double
        + Node()
        + Node()
        + activate()
        + equals()
        + getId()
        + getInputValue()
        + getLayer()
        + getOutgoingLinks()
        + getOutputValue()
        + incrementLayer()
        + isConnectedTo()
        + setInputValue()
        + setOutputValue()
        - activationFunction()
    }
  }
  

  namespace neat {
    class neat.Population {
        - bestAgentID : int
        - generation : int
        - organisms : Map<Integer, Network>
        - species : List<Species>
        + Population()
        + assignColor()
        + assignFitness()
        + getGeneration()
        + getNetwork()
        + incrementGeneration()
        + naturalSelection()
        - cullSpecies()
        - getAvgFitnessSum()
        - removeBadSpecies()
        - removeStaleSpecies()
        - setBestAgentID()
        - speciate()
    }
  }
  

  namespace neat {
    class neat.Species {
        {static} ~ takenColors : List<Color>
        - averageFitness : double
        - bestFitness : int
        - bestOrgID : int
        - color : Color
        - organisms : Map<Integer, Network>
        - staleness : int
        + Species()
        + addOrganism()
        + cull()
        + getAverageFitness()
        + getBestOrgID()
        + getColor()
        + getCompatibilityNetwork()
        + getOrganisms()
        + getStaleness()
        + reproduce()
        + setAverageFitness()
        + setCompatibilityNetwork()
        + setStaleness()
        + shareFitness()
    }
  }
  

  neat.Link o-- neat.Node : outputNode
  neat.Network o-- neat.Node : biasNode
  neat.Species o-- neat.Network : compatibilityNetwork


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
